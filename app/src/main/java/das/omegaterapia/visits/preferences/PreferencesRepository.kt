package das.omegaterapia.visits.preferences

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import das.omegaterapia.visits.utils.TemporalConverter
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import java.util.*
import javax.inject.Inject
import javax.inject.Singleton


/*******************************************************************************
 ****                Application Settings & User Preferences                ****
 *******************************************************************************/


/*************************************************
 **             Data Store Instance             **
 *************************************************/
private val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "PREFERENCES_SETTINGS")


/*************************************************
 **           Data Store Key Provider           **
 *************************************************/

// Singleton class used to get correct and predefined Data Store Keys.
@Suppress("FunctionName")
private object PreferencesKeys {
    val LAST_LOGGED_USER = stringPreferencesKey("last_logged_user")

    // Dynamic keys depending on the current user
    fun USER_LANG(user: String) = stringPreferencesKey("${user}_lang")
    fun USER_DAY_CONVERTER(user: String) = stringPreferencesKey("${user}_day_converter")
    fun USER_MULTIPLE_DAY_CONVERTER(user: String) = stringPreferencesKey("${user}_multiple_day_converter")
}


/*************************************************
 **         User Preferences Repository         **
 *************************************************/

/**
 * Class implementing a repository pattern. It provides access to app's settings and user preferences.
 *
 * It is annotated with Hilt's @Singleton so there's only one instance created on the application.
 * This class instance is created automatically by Hilt (Hilt also injects the required [Context])
 *
 * @property context Any context (required to get DataStore instance)
 */

@Singleton
class PreferencesRepository @Inject constructor(private val context: Context) : ILoginSettings, IUserPreferences {

    /*------------------------------------------------
    |                Last User Logged                |
    ------------------------------------------------*/
    // This "setting" is used for biometric authentication.

    /**
     * Collects the first preference item generated by DataStores [Flow] and returns the last logged user.
     */
    override suspend fun getLastLoggedUser(): String? = context.dataStore.data.first()[PreferencesKeys.LAST_LOGGED_USER]

    // Set the last logged user on DataStore Preferences
    override suspend fun setLastLoggedUser(username: String) {
        context.dataStore.edit { preferences ->
            preferences[PreferencesKeys.LAST_LOGGED_USER] = username
        }
    }


    /*------------------------------------------------
    |                User Preferences                |
    ------------------------------------------------*/
    /*
     * Curren user's username is required in these methods below.
     *
     * All getters returns a kotlin Flow in order to get automatic updates on the settings.
     * The Preferences flow is mapped to get only the desired preference or the default value if null.
     *
     * Getters are suspended to not block Main (UI) thread.
     */

    //----------   Language Preference   -----------//
    override fun userLanguage(user: String): Flow<String> =
        context.dataStore.data.map { it[PreferencesKeys.USER_LANG(user)] ?: Locale.getDefault().language }

    override suspend fun setUserLanguage(user: String, langCode: String) {
        context.dataStore.edit { preferences ->
            preferences[PreferencesKeys.USER_LANG(user)] = langCode
        }
    }


    //------   One-Day Converter Preference   ------//
    override fun userDayConverter(user: String): Flow<String> =
        context.dataStore.data.map { it[PreferencesKeys.USER_DAY_CONVERTER(user)] ?: TemporalConverter.oneDayDefault.name }

    override suspend fun setUserDayConverter(user: String, converter: String) {
        context.dataStore.edit { preferences ->
            preferences[PreferencesKeys.USER_DAY_CONVERTER(user)] = converter
        }
    }


    override fun userMultipleDayConverter(user: String): Flow<String> =
        context.dataStore.data.map { it[PreferencesKeys.USER_MULTIPLE_DAY_CONVERTER(user)] ?: TemporalConverter.multipleDayDefault.name }

    override suspend fun setUserMultipleDayConverter(user: String, converter: String) {
        context.dataStore.edit { preferences ->
            preferences[PreferencesKeys.USER_MULTIPLE_DAY_CONVERTER(user)] = converter
        }
    }
}